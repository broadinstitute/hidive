searchState.loadedDescShard("skydive", 0, "Crate for building and manipulating a series-parallel …\nThis module implements the <code>WhatsHap</code> phasing algorithm as …\nMethod to extract a single sample graph\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad a graphical genome from a file\nReverse complement of a k-mer\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nAuthorize data access to Google Cloud Storage (GCS) using …\nRepresents a linked de Bruijn graph with a k-mer size …\nStarting at a given k-mer, assemble a contig.\nAssemble all contigs from the linked de Bruijn graph.\nAssemble contigs at superbubbles in the graph.\nBuild the links for a de Bruijn graph from a vector of …\nThis function removes tips from the graph. A tip is …\nThis method will remove bubbles that have a score below …\nClean color-specific paths from the graph based on a …\nThis method will remove contigs that are shorter than the …\nClean tangles from the de Bruijn graph.\nThis method will remove tips that have a score below the …\nCorrects a sequence based on the de Bruijn graph. …\nFind a superbubble in a directed graph. See reference …\nReturns the argument unchanged.\nCreate a de Bruijn graph (and optional links) from a file …\nCreate a de Bruijn graph (and optional links) from many …\nCreate a de Bruijn graph (and optional links) from a …\nCreate a de Bruijn graph (and optional links) from a list …\nCalls <code>U::from(self)</code>.\nGet the name of the graph.\nScore k-mers using a Gradient Boosting Decision Tree model.\nTraverse all contigs in the graph and return a new graph …\nTraverse all kmers in the graph and return a new graph …\nThe <code>traverse_contigs</code> function traverses kmers starting …\nTraverse kmers starting from a given kmer and build a …\nRepresents metadata on a link (a series of junction …\nReturn a new link with the junction choices complemented.\nReturns the argument unchanged.\nCreate a link from a sequence of junction choices.\nPeek at a junction from the front of the queue.\nCalls <code>U::from(self)</code>.\nIndicate whether the list of junctions is empty.\nReturn orientation of the link.\nReturn the number of junction choices in the link.\nCreate an empty link record.\nTake a junction from the front of the queue.\nAdd a junction to the queue.\nRepresents a multi-color linked de Bruijn graph, all built …\nAppend a <code>LdBG</code> to the end of the <code>MLdBG</code>.\nAppend an <code>LdBG</code> to the end of the <code>MLdBG</code>, created anew from …\nAppend an <code>LdBG</code> to the end of the <code>MLdBG</code>, created from a …\nClear all <code>LdBGs</code> from the <code>MLdBG</code>.\nFilter reads from a fasta file based on a condition.\nReturns the argument unchanged.\nCreate an <code>MLdBG</code> from a vector of <code>LdBGs</code>.\nGet a reference to the <code>LdBG</code> at a specific index.\nInsert a <code>LdBG</code> at a specific position in the <code>MLdBG</code>.\nCalls <code>U::from(self)</code>.\nCheck if the <code>MLdBG</code> is empty.\nReturns an iterator over the <code>LdBGs</code> in the <code>MLdBG</code>.\nReturns a mutable iterator over the <code>LdBGs</code> in the <code>MLdBG</code>.\nReturns the number of <code>LdBGs</code> in the <code>MLdBG</code>.\nCreate an empty multi-color <code>LdBG</code>.\nRemove and return the last <code>LdBG</code> from the <code>MLdBG</code>.\nRemove and return the <code>LdBG</code> from the <code>MLdBG</code> if it matches a …\nAdd a <code>LdBG</code> to the <code>MLdBG</code>.\nRemove a <code>LdBG</code> from the <code>MLdBG</code> by index.\nScores the k-mers in the <code>MLdBG</code> using a pre-trained …\nGet the union of kmers from all <code>LdBGs</code> in the <code>MLdBG</code>.\nParse a list of BAM file paths into a <code>HashSet</code> of URLs. If …\nParse a list of loci strings into a <code>HashSet</code> of formatted …\nParse a locus string into a tuple of contig name, start …\nRepresents a de Bruijn graph record.\nReturn the Record’s coverage.\nReturns the argument unchanged.\nThe in-degree of a particular k-mer.\nReturn incoming edges\nIncrement the coverage value by 1.\nCalls <code>U::from(self)</code>.\nIdentifies junctions in the graph\nCreate an empty de Bruijn graph record.\nThe out-degree of a particular k-mer.\nReturn outgoing edges\nSet the coverage value.\nSet incoming edge.\nSet outgoing edge.\nFunction to open a BAM/CRAM file from a URL and cache its …\nFunction to open a FASTA file from a URL and cache its …\nChecks if a given genomic range spans any of the loci in …\nPublic function to stage data from multiple BAM files and …\nDownload a file from GCS and return the local filename. …\nGet the update time of a file in GCS. The GCS path should …\nList all files in a GCS path. The GCS path should be in …\nList all files in a GCS path with a specific suffix.\nSplit a GCS path into a bucket name and a prefix. The GCS …\nGet the update time of a file in the local filesystem.\nThis function takes a sequence URL and a list of possible …\nGet the canonical (lexicographically-lowest) version of a …\nCreate a new bounded progress bar with the specified …\nCreate a new unbounded progress bar with the specified …\nGiven fasta files this function will read and return a …\nReads a GFA file and constructs a directed graph from it.\nWrites a GFA file from a directed graph.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")