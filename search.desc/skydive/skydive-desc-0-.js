searchState.loadedDescShard("skydive", 0, "Crate for building and manipulating a series-parallel …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRepresents a linked de Bruijn graph with a k-mer size …\nStarting at a given k-mer, assemble a contig.\nAssemble all contigs from the linked de Bruijn graph.\nReturns the argument unchanged.\nCreate a de Bruijn graph (and optional links) from a file …\nCreate a de Bruijn graph (and optional links) from a list …\nCalls <code>U::from(self)</code>.\nGet name of graph.\nRepresents metadata on a link (a series of junction …\nReturn a new link with the junction choices complemented.\nReturns the argument unchanged.\nPeek at a junction from the front of the queue.\nCalls <code>U::from(self)</code>.\nIndicate whether the list of junctions is empty.\nReturn orientation of the link.\nReturn the number of junction choices in the link.\nCreate an empty link record.\nTake a junction from the front of the queue.\nAdd a junction to the queue.\nRepresents a multi-color linked de Bruijn graph, all built …\nAppend a LdBG to the end of the MLdBG.\nClear all LdBGs from the MLdBG.\nReturns the argument unchanged.\nInsert a LdBG at a specific position in the MLdBG.\nCalls <code>U::from(self)</code>.\nCheck if the MLdBG is empty.\nReturns the number of LdBGs in the MLdBG.\nCreate an empty multi-color LdBG.\nRemove and return the last LdBG from the MLdBG.\nRemove and return the LdBG from the MLdBG if it matches a …\nAdd a LdBG to the MLdBG.\nRemove a LdBG from the MLdBG by index.\nRepresents a de Bruijn graph record.\nReturn the Record’s coverage.\nReturns the argument unchanged.\nThe in-degree of a particular k-mer.\nReturn incoming edges\nIncrement the coverage value by 1.\nCalls <code>U::from(self)</code>.\nIdentifies junctions in the graph\nCreate an empty de Bruijn graph record.\nThe out-degree of a particular k-mer.\nReturn outgoing edges\nSet the coverage value.\nSet incoming edge.\nSet outgoing edge.\nThis function takes a sequence URL and a list of possible …")