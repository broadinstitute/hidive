searchState.loadedDescShard("skydive", 0, "Crate for building and manipulating a series-parallel …\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nRepresents a linked de Bruijn graph with a k-mer size …\nStarting at a given k-mer, assemble a contig.\nAssemble all contigs from the linked de Bruijn graph.\nGet the canonical (lexicographically-lowest) version of a …\nReturns the argument unchanged.\nCreate a de Bruijn graph (and optional links) from a file …\nCreate a de Bruijn graph (and optional links) from a list …\nCalls <code>U::from(self)</code>.\nGet the name of the graph.\nRepresents metadata on a link (a series of junction …\nReturn a new link with the junction choices complemented.\nReturns the argument unchanged.\nCreate a link from a sequence of junction choices.\nPeek at a junction from the front of the queue.\nCalls <code>U::from(self)</code>.\nIndicate whether the list of junctions is empty.\nReturn orientation of the link.\nReturn the number of junction choices in the link.\nCreate an empty link record.\nTake a junction from the front of the queue.\nAdd a junction to the queue.\nRepresents a multi-color linked de Bruijn graph, all built …\nAppend a LdBG to the end of the MLdBG.\nAppend an LdBG to the end of the MLdBG, created anew from …\nClear all LdBGs from the MLdBG.\nReturns the argument unchanged.\nGet a reference to the LdBG at a specific index.\nInsert a LdBG at a specific position in the MLdBG.\nCalls <code>U::from(self)</code>.\nCheck if the MLdBG is empty.\nReturns an iterator over the LdBGs in the MLdBG.\nReturns a mutable iterator over the LdBGs in the MLdBG.\nReturns the number of LdBGs in the MLdBG.\nCreate an empty multi-color LdBG.\nRemove and return the last LdBG from the MLdBG.\nRemove and return the LdBG from the MLdBG if it matches a …\nAdd a LdBG to the MLdBG.\nRemove a LdBG from the MLdBG by index.\nRepresents a de Bruijn graph record.\nReturn the Record’s coverage.\nReturns the argument unchanged.\nThe in-degree of a particular k-mer.\nReturn incoming edges\nIncrement the coverage value by 1.\nCalls <code>U::from(self)</code>.\nIdentifies junctions in the graph\nCreate an empty de Bruijn graph record.\nThe out-degree of a particular k-mer.\nReturn outgoing edges\nSet the coverage value.\nSet incoming edge.\nSet outgoing edge.\nThis function takes a sequence URL and a list of possible …")